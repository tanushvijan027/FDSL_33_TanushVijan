#include <stdio.h>
#include <stdlib.h>

struct node {
    int data;
    struct node *next;
};

struct node *front = NULL, *rear = NULL, *temp, *newnode;

void enqueue(int data) {
    newnode = malloc(sizeof(struct node));
    if (newnode == NULL) {
        printf("Memory allocation failed\n");
        return;
    }
    newnode->data = data;
    newnode->next = NULL;

    if (front == NULL && rear == NULL) {
        front = rear = newnode;
    } else {
        rear->next = newnode;
        rear = newnode;
    }
    printf("Element %d is enqueued\n\n", data);
}

void dequeue() {
    if (front == NULL) {
        printf("Queue is empty\n\n");
    } else {
        temp = front;
        printf("Element %d is dequeued\n\n", temp->data);
        front = front->next;
        if (front == NULL) {
            rear = NULL;
        }
        free(temp);
    }
}

void display() {
    if (front == NULL) {
        printf("Queue is empty.\n\n");
    } else {
        temp = front;
        printf("Queue elements: ");
        while (temp != NULL) {
            printf("%d\t", temp->data);
            temp = temp->next;
        }
        printf("\n\n");
    }
}

int main() {
    int choice, data;

    printf("***** Welcome to Queue Using Linked List *****\n");
    do {
        printf("1. Enqueue (insert element)\n");
        printf("2. Dequeue (delete element)\n");
        printf("3. Display\n");
        printf("4. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch(choice) {
            case 1:
                printf("Enter data: ");
                scanf("%d", &data);
                enqueue(data);
                break;
            case 2:
                dequeue();
                break;
            case 3:
                display();
                break;
            case 4:
                printf("Exiting...\n");
                break;
            default:
                printf("Invalid choice.\n\n");
        }
    } while (choice != 4);

    return 0;
}
