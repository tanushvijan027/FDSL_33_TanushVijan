#include<stdio.h>
#include<stdlib.h>
struct node
{
    int data;
    struct node *next;
    struct node *prev;
};
struct node *head = NULL,*temp,*newnode;
void insertAtFirst()
{
    newnode = malloc(sizeof(struct node));
    printf("Enter the data: ");
    scanf("%d",&newnode->data);
    if(head == NULL)
    {
        head = newnode;
        newnode->next = NULL;
        newnode->prev = NULL;
    }    
    else
    {
        temp = head;
        head = newnode;
        newnode->prev = NULL;
        newnode->next = temp;
        temp->prev = newnode;
    }
    printf("Node inserted at first\n\n");
}
void insertAtLast()
{
    newnode = malloc(sizeof(struct node));
    printf("Enter the data: ");
    scanf("%d",&newnode->data);
    if(head == NULL)
    {
        head = newnode;
        newnode->next = NULL;
        newnode->prev = NULL;
    }    
    else
    {
        temp = head;
        while(temp->next != NULL)
        {
            temp = temp->next;
        }
        temp->next = newnode;
        newnode->prev = temp;
        newnode->next = NULL;
    }
    printf("Node inserted at last\n\n");
}
void insertAtPosition()
{
    int pos,i=1;
    newnode = malloc(sizeof(struct node));
    printf("Enter the data: ");
    scanf("%d",&newnode->data);
    printf("Enter the position: ");
    scanf("%d",&pos);
    if(head == NULL && pos == 1)
    {
        head = newnode;
        newnode->next = NULL;
        newnode->prev = NULL;
    }    
    else if(head == NULL && pos != 1)
    {
        printf("Invalid position\n\n");
        return;
    }
    else if(pos == 1)
    {
        temp = head;
        head = newnode;
        newnode->prev = NULL;
        newnode->next = temp;
        temp->prev = newnode;
    }
    else
    {
        temp = head;
        while(temp != NULL && i < pos-1)
        {
            temp = temp->next;
            i++;
        }
        if(temp == NULL)
        {
            printf("Invalid position\n\n");
            return;
        }
        newnode->next = temp->next;
        if(temp->next != NULL)
            temp->next->prev = newnode;
        temp->next = newnode;
        newnode->prev = temp;        
    }
    printf("Node inserted at position %d\n\n",pos);
}
void deleteAtFirst()
{
    if(head == NULL)
    {
        printf("List is empty\n\n");
        return;
    }
    temp = head;
    head = head->next;
    if(head != NULL)    
        head->prev = NULL;
    free(temp);
    printf("Node deleted at first\n\n");
}
void deleteAtLast()
{
    if(head == NULL)
    {
        printf("List is empty\n\n");
        return;
    }
    temp = head;
    while(temp->next != NULL)
    {
        temp = temp->next;
    }
    if(temp->prev != NULL)
        temp->prev->next = NULL;
    else
        head = NULL;
    free(temp);
    printf("Node deleted at last\n\n");
}
void deleteAtPosition()
{
    int pos,i=1;
    printf("Enter the position: ");
    scanf("%d",&pos);
    if(head == NULL)
    {
        printf("List is empty\n\n");
        return;
    }
    if(pos == 1)
    {
        temp = head;
        head = head->next;
        if(head != NULL)    
            head->prev = NULL;
        free(temp);
    }
    else
    {
        temp = head;
        while(temp != NULL && i < pos)
        {
            temp = temp->next;
            i++;
        }
        if(temp == NULL)
        {
            printf("Invalid position\n\n");
            return;
        }
        if(temp->prev != NULL)
            temp->prev->next = temp->next;
        if(temp->next != NULL)
            temp->next->prev = temp->prev;
        free(temp);        
    }
    printf("Node deleted at position %d\n\n",pos);
}
void display()
{
    if(head == NULL)
    {
        printf("List is empty\n\n");
        return;
    }
    temp = head;
    printf("List: ");
    while(temp != NULL)
    {
        printf("%d ",temp->data);
        temp = temp->next;
    }
    printf("\n\n");
}
void reverseDisplay()
{
    if(head == NULL)
    {
        printf("List is empty\n\n");
        return;
    }
    temp = head;
    while(temp->next != NULL)
    {
        temp = temp->next;
    }
    printf("List in reverse order: ");
    while(temp != NULL)
    {
        printf("%d ",temp->data);
        temp = temp->prev;
    }
    printf("\n\n");
}
int main()
{
    int choice;
    printf("*****Welcome to Doubly Linked-List*****\n");
    while(choice!=9)
    {
        printf("1. Insert at first\n2. Insert at last\n3. Insert at position\n4. Delete at first\n5. Delete at last\n6. Delete at position\n7. Display\n8. Reverse display\n9. Exit\n");
        printf("Enter your choice: ");
        scanf("%d",&choice);
        switch(choice)
        {
            case 1: insertAtFirst(); break;
            case 2: insertAtLast(); break;
            case 3: insertAtPosition(); break;
            case 4: deleteAtFirst(); break;
            case 5: deleteAtLast(); break;
            case 6: deleteAtPosition(); break;
            case 7: display(); break;
            case 8: reverseDisplay(); break;
            case 9: printf("Exiting...\n\n"); break;
            default: printf("Invalid choice\n\n"); break;
        }
    }
    return 0;
}
