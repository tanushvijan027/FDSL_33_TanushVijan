#include<stdio.h>
#define size 4
int queue[size];
int rear=-1;
int front=-1;
void enQueue()
{
	int element;
	if((rear+1) % size == front)
	{
		printf("Queue is full\n\n");
	}
	else if(rear==-1 && front==-1)
	{
		rear=0;
		front=0;
		printf("Enter the element:");
		scanf("%d",&element);
		queue[rear]=element;
		printf("%d is inserted in queue\n\n",element);
	}
	else
	{
		rear=(rear+1) % size;
		printf("Enter the element:");
		scanf("%d",&element);
		queue[rear]=element;
		printf("%d is inserted in queue\n\n",element);
	}
}
void deQueue()
{
	if(front==-1 && rear==-1)
	{
		printf("Queue is empty\n\n");
	}
	else if(rear==front)
	{
		printf("%d is deleted from queue\n\n",queue[front]);
		rear=-1;
		front=-1;
	}
	else
	{
		printf("%d is deleted from queue\n\n",queue[front]);
		front=(front+1) % size;
	}
}
void display()
{
	if(rear==-1 && front==-1)
	{
		printf("Queue is Empty");
	}
	else
	{	
	printf("Elements in queue are:\n");
    	int i = front;
    	while (1)
    	{
        	printf("%d ", queue[i]);
        	if (i == rear)
            	{
            		break;
        	}
        	i = (i + 1) % size;
	}
	printf("\n\n");
}
}
int main()
{
	int ch;
	do
	{
		printf("-----Welcome to Circular Queue-----\n1.Insert Element\n2.Delete Element\n3.Display Queue\n4.Exit Queue\nEnter the operation to perform:");
	scanf("%d",&ch);
		switch(ch)
		{
			case 1:
				enQueue();
				break;
			case 2:
				deQueue();
				break;
			case 3:
				display();
				break;
			case 4:
				printf("Exiting queue....\n\n");
				break;
			default:
				printf("Invalid Choice\n\n");			
		}
	}while(ch!=4);
	return 0;		
}

